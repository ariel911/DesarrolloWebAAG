var rbSliderTypes = {
    fixed:{
        id: 'fixed',
        adaptSlider(rbSlider, $slide, slideIndex, dontAnimate){},
    },
    adaptToContent: {
        id: 'adaptToContent',
        sizeCheckTimeout: null,
        adaptSlider(rbSlider, $slide, slideIndex, dontAnimate){
            clearTimeout(this.resetHeightTimeout);
            let $slidesContainer = rbSlider.getSlidesContainer();
            let slideHeight = $slide.outerHeight();
            let containerHeight = $slidesContainer.outerHeight();

            $slidesContainer.height(`${containerHeight}px`);
            if(dontAnimate){
                $slidesContainer.height(`${slideHeight}px`);
            }
            else{
                //console.log(rbSlider, $slide, slideIndex, dontAnimate);
                setTimeout(function(){
                    $slidesContainer.animate({
                        height: `${slideHeight}px`,
                    }, {
                        duration: rbSlider.config.animationDuration,
                        queue: false,
                    });
                }, 0);
            }

            var _this = this;
            //If the height of the slide changed in 100 ml, resize
            this.sizeCheckTimeout = setTimeout(function(){
                if(slideHeight != $slide.outerHeight()){
                    _this.adaptSlider(rbSlider, $slide, slideIndex, dontAnimate);
                }
                else{
                    $slidesContainer.height(`${$slide.outerHeight()}px`);
                    clearTimeout(_this.resetHeightTimeout);
                }
            }, 100);
        },
    },
};

var rbSliderAnimations = {
    swipe: {
        id: 'swipe',
        goTo: function( rbSlider, $slide, slideIndex, dontAnimate ){
            let currentIndex = rbSlider.getCurrentIndex();
            let $currentSlide = rbSlider.getCurrentSlide();
            let $slidesContainer = rbSlider.getSlidesContainer();
            let isPrevious = slideIndex < currentIndex;
            let nextSlideOffset = $slide.offset();
            let slidesContainerOffset = $slidesContainer.offset();
            let displacement = isPrevious ? (slidesContainerOffset.left - nextSlideOffset.left) : -(nextSlideOffset.left - slidesContainerOffset.left);

            if(dontAnimate){
                $slidesContainer.css('left', `${displacement}px`);
            }
            else{
                $slidesContainer.stop().animate({
                    left: `${displacement}px`,
                }, {
                    duration: rbSlider.config.animationDuration,
                    queue: false,
                });
            }

            rbSlider.changeIndex(slideIndex, dontAnimate);
            rbSlider.adaptSlider(slideIndex, dontAnimate);
        },
    },
    swipeCards: {
        id: 'swipe',
        errorMargin: 2,
        goTo: function(rbSlider, $slide, slideIndex, dontAnimate){
            // console.log('From', rbSlider.getCurrentIndex(), 'to', slideIndex);
            let currentIndex = rbSlider.getCurrentIndex();
            let isPrevious = slideIndex < currentIndex;
            if(currentIndex == slideIndex)
                return;

            var $slidesContainer = rbSlider.getSlidesContainer();
            var slidesContainerInitialLeft = this.getSlidesContainerInitialOffset(rbSlider).left;
            var slidesContainerCurrentLeft = $slidesContainer.offset().left;
            // console.log(isPrevious ? 'Going previous' : 'Going next');

            /**
            * 1- Get the hidden slide (not completely visible or hidden from the slider view)
            */
            var $hiddenSlide = this.getHiddenSlide(rbSlider, currentIndex, isPrevious);
            var hiddenSlideIndex = rbSlider.getSlideIndex($hiddenSlide);
            // console.log('Hidden slide: ', hiddenSlideIndex, $hiddenSlide);

            /**
            * 2- Get hidden slide necessary offset for it to be at the beggining/end of the slider view
            */
            var movement = isPrevious ? ((Math.abs($hiddenSlide.offset().left) + $slidesContainer.innerWidth()) - $hiddenSlide.innerWidth()) : - ($hiddenSlide.offset().left);
            var displacement =  slidesContainerCurrentLeft + movement;
            // console.log('Initial new displacement:', displacement);

            /**
            * 3- Check if this new offset leaves any following slide out of the slide view.
            */
            var $followingHiddenSlide = this.getHiddenSlide(rbSlider, hiddenSlideIndex, isPrevious, movement);
            // console.log('Following hidden slide: ', $followingHiddenSlide);

            /**
            *   4- If there is no following hidden slide, then the first/last slide is present, and the displacement should be set
            *   to one that puts the first/last slide against the left/right border of the slider view, for it not to leave empty spaces
            */
            if(!$followingHiddenSlide){
                if(isPrevious) //First slide
                    displacement = 0;
                else{ //Last slide
                    var $lastSlide = rbSlider.getLastSlide();
                    displacement = slidesContainerCurrentLeft - ( ( $lastSlide.offset().left - ($slidesContainer.innerWidth()) ) + $lastSlide.innerWidth() );
                }
            }

            /**
            *   5 - Apply new displacement to the slides container
            */

            if(dontAnimate){
                $slidesContainer.css('left', `${displacement}px`);
            }
            else{
                $slidesContainer.stop().animate({
                    left: `${displacement}px`,
                }, {
                    duration: rbSlider.config.animationDuration,
                    queue: false,
                });
            }

            rbSlider.changeIndex(hiddenSlideIndex, dontAnimate);
            rbSlider.adaptSlider(hiddenSlideIndex, dontAnimate);
        },
        // Returns the slides container offset when there has been no displacement
        getSlidesContainerInitialOffset: function(rbSlider){
            var $slidesContainer = rbSlider.getSlidesContainer();
            var currentLeftPos = $slidesContainer.css('left');
            $slidesContainer.css('left', 0);
            var initialOffset = $slidesContainer.offset();
            $slidesContainer.css('left', currentLeftPos);
            return initialOffset;
        },
        /**
        *   Checks if an slide is completely visible from the right (its right border is inside the slider view)
        *   @param {RBSlider} rbSlider                              Slider intance
        *   @param {jQuery} $slide                                  The jQuery object of the slide element
        *   @param {float} displacement                             An offset to add to the count when checking if the slide is visible
        *
        */
        slideVisibleRight: function(rbSlider, $slide, displacement){
            var displacement = displacement ? displacement : 0;
            let $slidesContainer = rbSlider.getSlidesContainer();
            let slidesContainerOffsetRight = this.getSlidesContainerInitialOffset(rbSlider).left + $slidesContainer.innerWidth();
            let slideOffsetFromRight = $slide.offset().left + $slide.innerWidth();
            return (slideOffsetFromRight + displacement - this.errorMargin) <= slidesContainerOffsetRight;
        },
        /**
        *   Checks if an slide is completely visible from the left (its left border is inside the slider view)
        *   @param {RBSlider} rbSlider                              Slider intance
        *   @param {jQuery} $slide                                  The jQuery object of the slide element
        *   @param {float} displacement                             An offset to add to the count when checking if the slide is visible
        *
        */
        slideVisibleLeft: function(rbSlider, $slide, displacement){
            var displacement = displacement ? displacement : 0;
            let $slidesContainer = rbSlider.getSlidesContainer();
            let slidesContainerOffsetLeft = this.getSlidesContainerInitialOffset(rbSlider).left;
            let slideOffsetLeft = $slide.offset().left;
            return (slideOffsetLeft + displacement) >= slidesContainerOffsetLeft;
        },
        /**
        *   Returns the following slide that is not completely visible from the left or right.
        *   @param {RBSlider} rbSlider                              Slider intance
        *   @param {int} newIndex                                   Index from which to start searching for the slide
        *   @param {bool} prev                                      Wheter to check to the right or to the left
        *                                                           If true, it will search for the first slider to the left
        *                                                           that has his left border out of view.
        *                                                           If false, it will search to the right for the slider with its
        *                                                           right border hidden
        *   @param {float} displacement                             An offset to add to the count when checking for hidden slides
        *
        */
        getHiddenSlide: function(rbSlider, index, prev, displacement){
            var $slide = null;
            var initialIndex = prev ? index - 1 : index + 1;
            var imovement = prev ? -1 : 1;
            for(i = initialIndex; prev ? (i >= 0) : (i <= (rbSlider.getSlidesAmount() - 1)); i = i + imovement) {
                let $currentSlide = rbSlider.getSlide(i);
                if( (prev && !this.slideVisibleLeft(rbSlider, $currentSlide, displacement)) ||
                    (!prev && !this.slideVisibleRight(rbSlider, $currentSlide, displacement)) ){
                    $slide = $currentSlide;
                    break;
                }
            }
            return $slide;
        },
    },
    fade: {
        id: 'fade',
        goTo: function( rbSlider, $slide, slideIndex, dontAnimate ){
            let $currentSlide = rbSlider.getCurrentSlide();
            let $slides = rbSlider.getAllSlides();

            $currentSlide.removeClass('active');
            $slide.addClass('active');
            if(dontAnimate){
                $currentSlide.css('opacity', 0);
                $slide.css('opacity', 1);
            }
            else{
                $currentSlide.stop().animate({
                    opacity: 0,
                }, rbSlider.config.animationDuration);

                $slide.stop().animate({
                    opacity: 1,
                }, rbSlider.config.animationDuration);
            }

            rbSlider.changeIndex(slideIndex);
            rbSlider.adaptSlider(slideIndex);
        },
    },
};

( function( $ ) {
    $(document).ready(function(){
        // =========================================================================
        // SLIDER
        // =========================================================================
        class RBSlider{
            constructor($slider, config){
                this.$slider = $slider;
                this.id = $slider.attr('rb-slider-id');
                this.defaults = {
                    type: rbSliderTypes.fixed,
                    animation: rbSliderAnimations.swipe,
                    animationDuration: 400,
                    goAround: true,
                    autoSlide: false,
                    autoDuration: 5000,
                    relation: 'global', //inside if controls are inside the rb-slider
                };
                this.config = Object.assign({}, this.defaults, config);
                if(!this.id && this.config.relation == 'global')
                    return null;
                var _this = this;
                $(document).ready(function(){
                    _this.initialize();
                });
            }

            // =====================================================================
            // GETTERS
            // =====================================================================
            /**
            *   @param {int} attrIndex
            *   Indicates that we only want the bullet that points to the slide on given index
            *   @returns {jQuery} The bullet or bullets jQuery object
            */
            getBullets( attrIndex ){
                if(this.relationIsInside())
                    return attrIndex ? this.getSlider().find(`[rb-slider-to=${attrIndex}]`) : this.getSlider().find('[rb-slider-to]');
                return attrIndex ? $(`[rb-slider-link="${this.id}"][rb-slider-to=${attrIndex}]`) : $(`[rb-slider-link="${this.id}"][rb-slider-to]`);
            }

            /**
            *   @return {jQuery} Returns the jQuery object of an element thats binded to the current slide index
            */
            getLinkedIndexEl(){
                if(this.relationIsInside())
                    return this.getSlider().find('[rb-slider-index]');
                else
                    return $(`[rb-slider-link="${this.id}"][rb-slider-index]`);
            }

            getSlider(){
                return this.$slider;
            }

            getSlidesContainer(){
                let $slider = this.getSlider();
                return $slider.children('.rb-slides-container');
            }

            getSlide(index){
                return this.getSlidesContainer().children('.rb-slide').eq(index);
            }

            getSlideIndex($slide){
                return $slide.index();
            }

            getAllSlides(){
                return this.getSlidesContainer().children('.rb-slide');
            }

            getCurrentSlide(){
                return this.getSlide(this.getCurrentIndex());
            }

            getPrevSlide(){
                return this.getSlide(this.getPrevIndex());
            }

            getNextSlide(){
                return this.getSlide(this.getNextIndex());
            }

            getFirstSlide(){
                return this.getSlide(0);
            }

            getLastSlide(){
                return this.getSlide(this.getSlidesAmount() - 1);
            }

            isOnLastSlide(){
                return (this.getSlidesAmount() - 1) == this.getCurrentIndex();
            }

            isOnFirstSlide(){
                return this.getCurrentIndex() == 0;
            }

            getCurrentIndex(){
                let $slider = this.getSlider();
                let index = $slider.length ? parseInt($slider.attr('rb-slider-index')) : 0;
                index = index ? index : 0;
                return index;
            }

            getNextIndex(){
                return this.isOnLastSlide() ? 0 : this.getCurrentIndex() + 1;
            }

            getPrevIndex(){
                return this.isOnFirstSlide() ? (this.getSlidesAmount() - 1) : this.getCurrentIndex() - 1;
            }

            getSlidesAmount(){
                return this.getSlidesContainer().children('.rb-slide').length;
            }

            relationIsInside(){
                return this.config.relation == 'inside';
            }

            // =====================================================================
            // METHODS
            // =====================================================================
            /**
            *   Moves the slider to another slide, delegating the logic to the animation object.
            */
            goTo( index, dontAnimate ){
                let $slide = this.getSlide(index);
                //console.log(this.getSlider(), $slide, index);
                this.config.animation.goTo(this, $slide, index, dontAnimate);

                if( this.config.autoSlide ){
                    this.startAutoSlide();
                }
            }

            goToNext( ignoreGoAround ){
                if( !ignoreGoAround && ( !this.config.goAround && this.isOnLastSlide() ) )
                    return;
                this.goTo(this.getNextIndex());
            }

            goToPrev( ignoreGoAround ){
                if( !ignoreGoAround && ( !this.config.goAround && this.isOnFirstSlide() ) )
                    return;
                this.goTo(this.getPrevIndex());
            }

            changeIndex( newIndex, dontUpdateStatus ){
                let $slider = this.getSlider();
                if( $slider.length )
                    $slider.attr('rb-slider-index', parseInt(newIndex));
                if( !dontUpdateStatus )
                    this.updateStatus();
            }

            updateBullets(){
                let currentIndex = this.getCurrentIndex();
                let $bullets = this.getBullets();
                let $newActiveBullet = this.getBullets(currentIndex);
                $bullets.removeClass('active');
                $newActiveBullet.addClass('active');
            }

            updateSlidesStatus(){
                let $next = this.getPrevSlide();
                let $current = this.getCurrentSlide();
                let $prev = this.getNextSlide();

                if($next.length)
                    $next.removeClass('rb-next-slide rb-current-slide rb-prev-slide');
                if($current.length)
                    $current.removeClass('rb-next-slide rb-current-slide rb-prev-slide');
                if($prev.length)
                    $prev.removeClass('rb-next-slide rb-current-slide rb-prev-slide');

                if($next.length)
                    $next.addClass('rb-next-slide');
                if($current.length)
                    $current.addClass('rb-current-slide');
                if($prev.length)
                    $prev.addClass('rb-prev-slide');
            }

            updateLinkedIndexEl(){
                let $linkedIndexEl = this.getLinkedIndexEl();
                if($linkedIndexEl)
                    $linkedIndexEl.text(this.getCurrentIndex() + 1);
            }

            updateStatus(){
                this.updateBullets();
                this.updateLinkedIndexEl();
                this.updateSlidesStatus();
            }

            adaptSlider( index, dontAnimate ){
                let $slide = this.getSlide(index);//console.log(dontAnimate);
                this.config.type.adaptSlider( this, $slide, index, dontAnimate );
            }

            setupAttributes(){
                let $slider = this.getSlider();
                if( $slider.length ){
                    $slider.attr('rb-slider-animation', this.config.animation.id);
                    $slider.attr('rb-slider-type', this.config.type.id);
                }
            }

            startAutoSlide(){
                var rbSlider = this;
                this.clearAutoSlide();
                this.autoslideInterval = setInterval(function(){
                    rbSlider.goToNext();
                }, this.config.autoDuration);
            }

            clearAutoSlide(){
                this.autoslideInterval = clearInterval(this.autoslideInterval);
            }

            // =====================================================================
            // INITIALIZE
            // =====================================================================
            initialize(){
                var rbSlider = this;
                var $slider = this.getSlider();

                $slider.attr('rb-slider-index', 0);
                this.setupAttributes();
                this.goTo(0, true);

                $(window).on('resize', function(){
                    let currentIndex = rbSlider.getCurrentIndex();
                    rbSlider.goTo(currentIndex, true);
                });

                if(this.relationIsInside()){
                    $slider.on('click', '[rb-slider-prev]', function(){
                        rbSlider.goToPrev();
                    });
                    $slider.on('click', '[rb-slider-next]', function(){
                        rbSlider.goToNext();
                    });
                    $slider.on('click', '[rb-slider-to]', function(){
                        let index = parseInt($(this).attr('rb-slider-to'));
                        rbSlider.goTo(index);
                    });
                }
                else{
                    $(`[rb-slider-link="${this.id}"][rb-slider-prev]`).click(function(){
                        rbSlider.goToPrev();
                    });
                    $(`[rb-slider-link="${this.id}"][rb-slider-next]`).click(function(){
                        rbSlider.goToNext();
                    });
                    $(`[rb-slider-link="${this.id}"][rb-slider-to]`).click(function(){
                        let index = parseInt($(this).attr('rb-slider-to'));
                        rbSlider.goTo(index);
                    });
                }
                this.updateLinkedIndexEl();

                if( this.config.autoSlide ){
                    this.startAutoSlide();
                }

                $slider.addClass('initialized');
            }
        }

        $('.rb-slider').each(function(){
            let config = {};

            let typeAttr = $(this).attr('rb-slider-type');
            if( typeof typeAttr !== typeof undefined && typeAttr !== false )
                config.type = rbSliderTypes[typeAttr];

            let animationAttr = $(this).attr('rb-slider-animation');
            // console.log(rbSliderAnimations[animationAttr]);
            if( typeof animationAttr !== typeof undefined && animationAttr !== false )
                config.animation = rbSliderAnimations[animationAttr];

            let durationAttr = $(this).attr('rb-slider-duration');
            if( typeof durationAttr !== typeof undefined && durationAttr !== false )
                config.animationDuration = parseInt(durationAttr);

            let goAroundAttr = $(this).attr('rb-slider-goAround');
            if( typeof goAroundAttr !== typeof undefined && goAroundAttr !== false )
                config.goAround = goAroundAttr == 'true';

            let autoSlideAttr = $(this).attr('rb-slider-autoSlide');
            if( typeof autoSlideAttr !== typeof undefined && autoSlideAttr !== false )
                config.autoSlide = autoSlideAttr == 'true';

            let autoDurationAttr = $(this).attr('rb-slider-autoDuration');
            if( typeof autoDurationAttr !== typeof undefined && autoDurationAttr !== false )
                config.autoDuration = parseInt(autoDurationAttr);

            let relationAttr = $(this).attr('rb-slider-relation');
            if( typeof relationAttr !== typeof undefined && relationAttr !== false )
                config.relation = relationAttr;

            new RBSlider($(this), config);
        });

    });
} )( jQuery );
